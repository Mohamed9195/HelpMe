//
//  SignUpViewController.swift
//  HelpMe
//
//  Created by mohamed hashem on 2/13/20.
//  Copyright (c) 2020 mohamed hashem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa

class SignUpViewController: UIViewController, SignUpViewModelProtocol {

    @IBOutlet private weak var emailField: UITextField!
    @IBOutlet private weak var passwordField: UITextField!
    @IBOutlet private weak var phoneField: UITextField!
    @IBOutlet private weak var doneButton: UIButton!

    fileprivate let disposeBag = DisposeBag()
    fileprivate var keyboardEventListener = KeyboardEventListener()
    let viewModel: SignUpViewModel = SignUpViewModel()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        keyboardEventListener.updateHeightBasedOnKeyboardEvent(for: self)
        viewModel.delegate = self
        subscribeFormattedEmailAndPassword()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(false, animated: true)
        navigationController?.navigationBar.tintColor = .some(#colorLiteral(red: 0, green: 0.6298658848, blue: 0.9208675027, alpha: 1))

        emailField.becomeFirstResponder()
    }

    func registerComplete() {
        UIHelper.hideProgressView()
        self.performSegue(withIdentifier: "toMainModel", sender: self)
    }

    func registerFail(error: Error) {
        UIHelper.hideProgressView()
        let alert = UIAlertController(title: "Error", message: "\(error)", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
    }

    func dataSavedError(error: Error) {
        UIHelper.hideProgressView()
    }

    private func subscribeFormattedEmailAndPassword() {
        let isPasswordValid = passwordField.rx.text.orEmpty.map { $0.count >= 6 }.distinctUntilChanged()

        let emailTrimmed = emailField.rx.text.orEmpty.map { $0.trimmingCharacters(in: .whitespacesAndNewlines)}

        let isPhoneValid = phoneField.rx.text.orEmpty.map { $0.count == 11 }.distinctUntilChanged()

        emailTrimmed.subscribe(onNext:  { [weak self] trimmedString in
            self?.emailField.text = trimmedString
        }).disposed(by: disposeBag)

        let isEmailValid = emailTrimmed.map(isValidEmail).distinctUntilChanged()

        let isButtonEnabled = Observable.combineLatest(isPasswordValid, isEmailValid, isPhoneValid) { $0 && $1 && $2}

        isButtonEnabled.bind(to: doneButton.rx.isEnabled).disposed(by: disposeBag)
    }

    private func isValidEmail(testStr: String) -> Bool {
        let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}"

        let emailTest = NSPredicate(format: "SELF MATCHES %@", emailRegEx)
        return emailTest.evaluate(with: testStr)
    }

    @IBAction func doneButtonPressed(_ sender: UIButton) {
        UIHelper.showProgressView()
        saveData()
        viewModel.regester(email: emailField.text!, password: passwordField.text!)
    }

    private func saveData() {
        let age = UserDefaults.standard.object(forKey: "UserAge") as? Date
        //        let imageData = UserDefaults.standard.object(forKey: "userImage") as? Data
        //        var image: UIImage?
        //        if let imageData = imageData {
        //            image = UIImage(data: imageData)
        //        }
        let name = UserDefaults.standard.string(forKey: "UserName")
        UserDefaults.standard.synchronize()

        let newUser = MainModel.User(userName: name,
                                     userID: nil,
                                     email: emailField.text,
                                     phone: phoneField.text,
                                     gender: nil,
                                     birthdate: age,
                                     PersonalID: passwordField.text,
                                     currentLocation: nil)
        MainModel.User.current.onNext(newUser)

        let encoder = JSONEncoder()
        if let encoded = try? encoder.encode(newUser) {
            UserDefaults.standard.setValue(encoded, forKeyPath: "NewUser")
        }
    }
}
