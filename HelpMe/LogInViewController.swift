//
//  LogInViewController.swift
//  HelpMe
//
//  Created by mohamed hashem on 2/13/20.
//  Copyright (c) 2020 mohamed hashem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa

protocol LogInViewControllerInput: class {
    func presentError(error: String)
    func presentSuccess()
}

protocol LogInViewControllerOutput: class {
    func login(email: String, password: String)
}

class LogInViewController: UIViewController, LogInViewControllerInput {

    var output: LogInViewControllerOutput?
    var router: LogInRouter!
    private let disposeBag = DisposeBag()

    @IBOutlet private weak var emailTextField: UITextField!
    @IBOutlet private weak var passwordTextField: UITextField!
    @IBOutlet private weak var signInButton: UIButton!

    // MARK: View lifecycle
    override func awakeFromNib() {
        super.awakeFromNib()
        LoginConfiguration.sharedInstance.configure(viewController: self)
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        KeyboardEventListener().updateHeightBasedOnKeyboardEvent(for: self)

        subscribeFormattedEmailAndPassword()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        emailTextField.becomeFirstResponder()
        
        prepareNetworkConfiguration { [weak self] internetConnection in
            guard let self = self else { return }
            switch internetConnection {
            case .connected: break
            case .disconnected:
                self.showErrorToastWith(message: "No Internet Connection")
            }
        }
    }

    private func subscribeFormattedEmailAndPassword() {
        let isPasswordValid = passwordTextField.rx.text.orEmpty.map { $0.count >= 6 }.distinctUntilChanged()

        let emailTrimmed = emailTextField.rx.text.orEmpty.map { $0.trimmingCharacters(in: .whitespacesAndNewlines)}

        emailTrimmed.subscribe(onNext:  { [weak self] trimmedString in
            self?.emailTextField.text = trimmedString
            }).disposed(by: disposeBag)

        let isEmailValid = emailTrimmed.map(isValidEmail).distinctUntilChanged()

        let isButtonEnabled = Observable.combineLatest(isPasswordValid, isEmailValid) { $0 && $1 }

        isButtonEnabled.bind(to: signInButton.rx.isEnabled).disposed(by: disposeBag)
    }

    private func isValidEmail(testStr: String) -> Bool {
        let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}"
        
        let emailTest = NSPredicate(format: "SELF MATCHES %@", emailRegEx)
        return emailTest.evaluate(with: testStr)
    }

    func presentError(error: String) {
        UIHelper.hideProgressView()
        let alert = UIAlertController(title: "Error", message: "\(error)", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
        self.showErrorToastWith(message: error)
    }

    func presentSuccess() {
        UIHelper.hideProgressView()
        router.navigateToHome()
    }

    @IBAction func dissmisView(_ sender: UIButton) {
        dismiss(animated: true, completion: nil)
    }
    @IBAction func loginPressed(sender: UIButton) {
        UIHelper.showProgressView()
        output?.login(email: emailTextField.text!, password: passwordTextField.text!)
    }
}
